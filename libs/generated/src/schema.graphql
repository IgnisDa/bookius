# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
The standard interface that contains the error message when something goes wrong
"""
interface APIError {
  """The error message giving details about what went wrong"""
  message: String!
}

"""The people who have worked on a book"""
type ArchitectDto {
  """Details about the author"""
  author: AuthorDto!

  """Role of this particular architect"""
  role: ArchitectRole!
}

"""The role of a person in the complete production of a book"""
enum ArchitectRole {
  AUTHOR
  ILLUSTRATOR
}

"""An author that is available to be viewed by the user"""
type AuthorDto {
  """A brief description of the author"""
  bio: String

  """The date and time when this author was added to the service"""
  createdAt: DateTime!

  """The primary key of the author"""
  id: BigInt!

  """Name of the author"""
  name: String!

  """The date and time when information about this author was last updated"""
  updatedAt: DateTime!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""A book that is available to be viewed by the user"""
type BookDto {
  """The people involved in the production of this book"""
  architects: [ArchitectDto!]!

  """The images associated with this book"""
  bookImages: [BookImageDto!]!

  """The date and time when this book was added to the service"""
  createdAt: DateTime!

  """A brief description of the author"""
  description: String

  """The primary key of the book"""
  id: BigInt!

  """The ISBN-10 unique identifier of this book"""
  isbn10: ISBN!

  """The ISBN-13 unique identifier of this book"""
  isbn13: ISBN!

  """Name of the book"""
  title: String!

  """The date and time when information about this book was last updated"""
  updatedAt: DateTime!
}

"""Details about a book without their architect details"""
type BookDtoWithoutArchitect {
  """The people involved in the production of this book"""
  architects: [ArchitectDto!]!

  """The images associated with this book"""
  bookImages: [BookImageDto!]!

  """The date and time when this book was added to the service"""
  createdAt: DateTime!

  """A brief description of the author"""
  description: String

  """The primary key of the book"""
  id: BigInt!

  """The ISBN-10 unique identifier of this book"""
  isbn10: ISBN!

  """The ISBN-13 unique identifier of this book"""
  isbn13: ISBN!

  """Name of the book"""
  title: String!

  """The date and time when information about this book was last updated"""
  updatedAt: DateTime!
}

"""A simple author instance in database"""
type BookImageDto {
  """A base64 encoded string to be used to provide blurred previews"""
  base64String: String!

  """A fully qualified url to the book cover"""
  coverUrl: URL!
}

"""Model to track a user's reading progress with a particular book"""
type BookProgressLogDto {
  """The ID of the book it is associated with"""
  bookId: BigInt!

  """A unique ID associated with this record"""
  id: BigInt!

  """The number of pages in this run of reading"""
  numPages: NonNegativeInt!

  """Face value, so if a book is 82% complete, this value will be `82.00`"""
  percentage: NonNegativeFloat!

  """The date and time this was first logged"""
  startedOn: DateTime!

  """The date and time this was last updated on"""
  updatedOn: DateTime!
}

"""
The object returned when there is an error getting details about a book
"""
type BooksDetailsError implements APIError {
  """The error encountered while executing this query"""
  message: String!
}

"""
The result returned when a client tries to get details about a particular book
"""
union BooksDetailsResultUnion = BookDto | BooksDetailsError

"""The object returned when there is an error while performing the search"""
type BooksSearchError implements APIError {
  """The error encountered while executing this query"""
  message: String!
}

"""The input type used to search for books"""
input BooksSearchInput {
  """The position in the collection at which to start the list of results"""
  offset: Int = 0

  """Full-text query string, should be URI **decoded**"""
  query: String!
}

"""The result returned when a client tries to search for a book"""
union BooksSearchResultUnion = BooksSearchError | OpenLibraryResponse

"""Type returned for the error when a new user is created."""
type CreateUserError {
  """General errors relating to the registration attempt"""
  message: String
}

"""Result type returned as the result when new user is created."""
union CreateUserResultUnion = CreateUserError | UserDto

"""The input type to create a new shelf for a user"""
input CreateUserShelfInput {
  """A description associated with this shelf"""
  description: String

  """
  Wether this shelf will be publicly available to others. A public shelf can be viewed
  by anyone.
  """
  isPublic: Boolean

  """Name of the new shelf"""
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
A field whose value is a ISBN-10 or ISBN-13 number: https://en.wikipedia.org/wiki/International_Standard_Book_Number.
"""
scalar ISBN

"""The type returned for the errors when login is unsuccessful"""
type LoginError implements APIError {
  """The error message corresponding to this login attempt"""
  message: String!
}

"""The type returned on successful login"""
type LoginResult {
  """Wether the login attempt was successful"""
  status: Boolean!

  """The user this login result is associated with"""
  user: UserDto!
}

"""Result type returned as the result when someone tries to login"""
union LoginResultUnion = LoginError | LoginResult

type Mutation {
  """Mutation to create a new user with a given authentication token."""
  createUser(issuer: String!): CreateUserResultUnion!

  """Create a shelf for the current user."""
  createUserShelf(input: CreateUserShelfInput!): ShelfDto!

  """Login using an authentication token."""
  loginUser(issuer: String!): LoginResultUnion!
}

"""Floats that will have a value of 0 or more."""
scalar NonNegativeFloat

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

"""The response object when communicating with the Open Library API"""
type OpenLibraryResponse {
  """The documents returned by the API"""
  docs: [OpenLibraryWorkDto!]!

  """Number of results found for the query"""
  numFound: Int!

  """The offset for the query"""
  offset: Int!
}

"""An author of a work present in the Open Library databases"""
type OpenLibraryWorkAuthorDto {
  """A unique key assigned to this author"""
  key: String!

  """Name of the author"""
  name: String!
}

"""A volume from the Open Library API"""
type OpenLibraryWorkDto {
  """Names of the author of the book"""
  authorName: [String!]

  """Cover image ID for the book"""
  coverI: String

  """Unique Industry Identifiers for the book"""
  isbn: [String!]

  """The open library unique ID"""
  key: String!

  """The language the book is written in"""
  language: [String!]

  """Title of the book"""
  title: String!
}

type Query {
  """Get details about a particular work from the different APIs."""
  bookDetails(isbn: ISBN!): BooksDetailsResultUnion!

  """Check whether a user with the given issuer exists in the database."""
  checkUserByIssuer(issuer: String!): Boolean!

  """Get a filtered list of all books in the service."""
  filterBooks(
    """The number of items to take"""
    take: NonNegativeInt!
  ): [BookDto!]!

  """Get a list of all shelves created by this user."""
  filterUserShelves(
    """The number of items to take"""
    take: NonNegativeInt!
  ): [ShelfDto!]!

  """Get a list of books related to a search query from Open Library API."""
  openLibraryBooksSearch(input: BooksSearchInput!): BooksSearchResultUnion!

  """Get list of book progresses that are related to the user."""
  userBookProgressLogs(
    """The number of items to take"""
    take: NonNegativeInt!
  ): [BookProgressLogDto!]!

  """Get a small list of authors that are related to the user."""
  userRelatedAuthors: [AuthorDto!]!

  """Get a small list of books that are related to the user."""
  userRelatedBooks: [BookDto!]!
}

"""Counts of various statistics related to shelves"""
type ShelfCountDto {
  """The number of books in this shelf"""
  books: Float!
}

"""A shelf that is created by a user"""
type ShelfDto {
  """Counts of various statistics related to shelves"""
  _count: ShelfCountDto!

  """The books that are contained in this shelf"""
  books: [BookDtoWithoutArchitect!]!

  """The date and time when this shelf was created"""
  createdAt: DateTime!

  """A brief description about the shelf and what is contains"""
  description: String

  """Unique identifier for the shelf"""
  id: ID!

  """Whether the shelf is visible to other users"""
  isPublic: Boolean!

  """Name of the shelf"""
  name: String!

  """The date and time when information about this shelf was last updated"""
  updatedAt: DateTime!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""Critical details about a user of the service"""
type UserDto {
  """The unique identifier for this user"""
  id: String!
}
