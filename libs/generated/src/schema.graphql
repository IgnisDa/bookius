# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
The standard interface that contains the error message when something goes wrong
"""
interface APIError {
  """The error message giving details about what went wrong"""
  message: String!
}

"""The role of a person in the complete production of a book"""
enum ArchitectRole {
  AUTHOR
  ILLUSTRATOR
}

"""The people who have worked on a book"""
type ArchitectsOnBooks {
  author: Author!
  authorId: String!
  book: Book!
  bookId: String!
  role: ArchitectRole!
}

type ArchitectsOnBooksAvgAggregate {
  authorId: Float
  bookId: Float
}

type ArchitectsOnBooksCountAggregate {
  _all: Int!
  authorId: Int!
  bookId: Int!
  role: Int!
}

type ArchitectsOnBooksMaxAggregate {
  authorId: String
  bookId: String
  role: ArchitectRole
}

type ArchitectsOnBooksMinAggregate {
  authorId: String
  bookId: String
  role: ArchitectRole
}

type ArchitectsOnBooksSumAggregate {
  authorId: String
  bookId: String
}

"""
This model will keep track of authors that will be made available to the users
"""
type Author {
  _count: AuthorCount!
  bio: String
  books: [ArchitectsOnBooks!]
  createdAt: DateTime!
  id: BigInt!
  name: String!
  openLibraryKey: String!
  updatedAt: DateTime!
}

type AuthorAvgAggregate {
  id: Float
}

type AuthorCount {
  books: Int!
}

type AuthorCountAggregate {
  _all: Int!
  bio: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  openLibraryKey: Int!
  updatedAt: Int!
}

type AuthorMaxAggregate {
  bio: String
  createdAt: DateTime
  id: BigInt
  name: String
  openLibraryKey: String
  updatedAt: DateTime
}

type AuthorMinAggregate {
  bio: String
  createdAt: DateTime
  id: BigInt
  name: String
  openLibraryKey: String
  updatedAt: DateTime
}

type AuthorSumAggregate {
  id: BigInt
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""
This model will keep track of books that will be made available to the users
"""
type Book {
  BookProgressLog: [BookProgressLog!]
  _count: BookCount!
  architects: [ArchitectsOnBooks!]
  createdAt: DateTime!
  description: String
  id: BigInt!
  isbn: String!
  shelves: [Shelf!]
  title: String!
  updatedAt: DateTime!
}

type BookAvgAggregate {
  id: Float
}

type BookCount {
  BookProgressLog: Int!
  architects: Int!
  shelves: Int!
}

type BookCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  isbn: Int!
  title: Int!
  updatedAt: Int!
}

"""Details about a book without their architect details"""
type BookDtoWithoutArchitect {
  BookProgressLog: [BookProgressLog!]
  _count: BookCount!
  createdAt: DateTime!
  description: String
  id: BigInt!
  isbn: String!
  shelves: [Shelf!]
  title: String!
  updatedAt: DateTime!
}

type BookMaxAggregate {
  createdAt: DateTime
  description: String
  id: BigInt
  isbn: String
  title: String
  updatedAt: DateTime
}

type BookMinAggregate {
  createdAt: DateTime
  description: String
  id: BigInt
  isbn: String
  title: String
  updatedAt: DateTime
}

"""Model to track a user's reading progress with a particular book"""
type BookProgressLog {
  book: Book!
  bookId: String!
  id: BigInt!
  numPages: Int!

  """Face value, so if a book is 82% complete, this value will be `82.00`"""
  percentage: Decimal!
  startedOn: DateTime!
  updatedOn: DateTime!
  user: User!
  userId: String!
}

type BookProgressLogAvgAggregate {
  bookId: Float
  id: Float
  numPages: Float
  percentage: Decimal
}

type BookProgressLogCountAggregate {
  _all: Int!
  bookId: Int!
  id: Int!
  numPages: Int!
  percentage: Int!
  startedOn: Int!
  updatedOn: Int!
  userId: Int!
}

type BookProgressLogMaxAggregate {
  bookId: String
  id: BigInt
  numPages: Int
  percentage: Decimal
  startedOn: DateTime
  updatedOn: DateTime
  userId: String
}

type BookProgressLogMinAggregate {
  bookId: String
  id: BigInt
  numPages: Int
  percentage: Decimal
  startedOn: DateTime
  updatedOn: DateTime
  userId: String
}

type BookProgressLogSumAggregate {
  bookId: String
  id: BigInt
  numPages: Int
  percentage: Decimal
}

type BookSumAggregate {
  id: BigInt
}

"""Type returned for the error when a new user is created."""
type CreateUserError {
  """General errors relating to the registration attempt"""
  message: String
}

"""Result type returned as the result when new user is created."""
union CreateUserResultUnion = CreateUserError | UserDto

"""The input type used to create a new shelf"""
input CreateUserShelfInput {
  """A description of the new shelf"""
  description: String

  """Whether the shelf will be publicly available"""
  isPublic: Boolean = true

  """Name of the new shelf"""
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""An arbitrary-precision Decimal type"""
scalar Decimal

"""The type returned for the errors when login is unsuccessful"""
type LoginError implements APIError {
  """The error message corresponding to this login attempt"""
  message: String!
}

"""The type returned on successful login"""
type LoginResult {
  """Wether the login attempt was successful"""
  status: Boolean!

  """The user this login result is associated with"""
  user: UserDto!
}

"""Result type returned as the result when someone tries to login"""
union LoginResultUnion = LoginError | LoginResult

type Mutation {
  """Mutation to create a new user with a given authentication token."""
  createUser(issuer: String!): CreateUserResultUnion!

  """Create a shelf for the current user."""
  createUserShelf(input: CreateUserShelfInput!): ShelfDto!

  """Login using an authentication token."""
  loginUser(issuer: String!): LoginResultUnion!
}

type Query {
  """Get a list of all books in the service."""
  books: [Book!]!

  """Check whether a user with the given issuer exists in the database."""
  checkUserByIssuer(issuer: String!): Boolean!

  """Get status of the service."""
  getStatus: Boolean!

  """Get list of book progresses that are related to the user."""
  userBookProgressLogs(take: Int): [BookProgressLog!]!

  """Get a small list of authors that are related to the user."""
  userRelatedAuthors: [Author!]!

  """Get a small list of books that are related to the user."""
  userRelatedBooks: [Book!]!

  """Get a list of all shelves created by this user."""
  userShelves: [ShelfDto!]!
}

"""A shelf is created by users to collect a number of books together"""
type Shelf {
  _count: ShelfCount!
  books: [Book!]
  createdAt: DateTime!
  description: String
  id: ID!
  isPublic: Boolean!
  name: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type ShelfCount {
  books: Int!
}

type ShelfCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  isPublic: Int!
  name: Int!
  updatedAt: Int!
  userId: Int!
}

"""Counts of various statistics related to shelves"""
type ShelfCountDto {
  """The number of books in this shelf"""
  books: Float!
}

"""A shelf that is created by a user"""
type ShelfDto {
  """Counts of various statistics related to shelves"""
  _count: ShelfCountDto!

  """The books that are contained in this shelf"""
  books: [BookDtoWithoutArchitect!]!

  """The date and time when this shelf was created"""
  createdAt: DateTime!

  """A brief description about the shelf and what is contains"""
  description: String

  """Unique identifier for the shelf"""
  id: ID!

  """Whether the shelf is visible to other users"""
  isPublic: Boolean!

  """Name of the shelf"""
  name: String!

  """The date and time when information about this shelf was last updated"""
  updatedAt: DateTime!
}

type ShelfMaxAggregate {
  createdAt: DateTime
  description: String
  id: String
  isPublic: Boolean
  name: String
  updatedAt: DateTime
  userId: String
}

type ShelfMinAggregate {
  createdAt: DateTime
  description: String
  id: String
  isPublic: Boolean
  name: String
  updatedAt: DateTime
  userId: String
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

"""This model will represent a user of the service."""
type User {
  BookProgressLog: [BookProgressLog!]
  _count: UserCount!
  createdAt: DateTime!
  id: ID!
  issuer: String!
  profile: UserProfile
  shelves: [Shelf!]
}

type UserCount {
  BookProgressLog: Int!
  shelves: Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  issuer: Int!
}

"""Critical details about a user of the service"""
type UserDto {
  """The primary key of the user"""
  id: ID!
}

type UserMaxAggregate {
  createdAt: DateTime
  id: String
  issuer: String
}

type UserMinAggregate {
  createdAt: DateTime
  id: String
  issuer: String
}

"""This model will track profile information about the user"""
type UserProfile {
  age: Int
  bio: String
  countryId: Int
  email: String!
  id: UUID!
  updatedAt: DateTime!
  user: User!
  userId: String!
  username: String!
}

type UserProfileAvgAggregate {
  age: Float
  countryId: Float
}

type UserProfileCountAggregate {
  _all: Int!
  age: Int!
  bio: Int!
  countryId: Int!
  email: Int!
  id: Int!
  updatedAt: Int!
  userId: Int!
  username: Int!
}

type UserProfileMaxAggregate {
  age: Int
  bio: String
  countryId: Int
  email: String
  id: UUID
  updatedAt: DateTime
  userId: String
  username: String
}

type UserProfileMinAggregate {
  age: Int
  bio: String
  countryId: Int
  email: String
  id: UUID
  updatedAt: DateTime
  userId: String
  username: String
}

type UserProfileSumAggregate {
  age: Int
  countryId: Int
}
