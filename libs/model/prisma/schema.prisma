datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "../../../dist"
  outputName          = "schema.dbml"
  projectName         = "Bookius Main Schema"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "The database schema of the main bookius server"
}

/// This model will represent a user of the service.
model User {
  id               String            @id @default(cuid())
  // the cryptographic address issued by magic
  issuer           String            @unique
  createdAt        DateTime          @default(now())
  profile          UserProfile?
  shelves          Shelf[]
  bookProgressLogs BookProgressLog[]
}

/// This model will track profile information about the user
model UserProfile {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  bio       String?
  age       Int?     @db.SmallInt
  username  String   @unique @db.Citext
  email     String   @unique @db.Citext
  updatedAt DateTime @updatedAt
  // the country as represented in the country service file
  countryId Int?
}

/// This model will keep track of books that will be made available to the users
model Book {
  id                BigInt              @id @default(autoincrement())
  title             String
  description       String?
  isbn10            String?
  isbn13            String?
  /// The unique keys for the book assigned by the Open Library API, eg: OL26868794M
  openLibraryKeys   String[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  publishDate       String?
  publishers        String[]
  architects        ArchitectsOnBooks[]
  bookProgressLogs  BookProgressLog[]
  bookImages        BookImage[]
  shelvesOfThisBook BooksInShelves[]
}

/// This model will be used for images of a book
model BookImage {
  id           BigInt @id @default(autoincrement())
  // the book this image belongs to
  book         Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  // fully qualified URL of the book
  coverUrl     String
  // a base 64 encoded string for this book
  base64String String
  bookId       BigInt
}

/// The role of a person in the complete production of a book
enum ArchitectRole {
  AUTHOR
  ILLUSTRATOR
}

/// The people who have worked on a book
model ArchitectsOnBooks {
  book     Book          @relation(fields: [bookId], references: [id], onDelete: Cascade)
  author   Author        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  bookId   BigInt
  authorId BigInt
  role     ArchitectRole

  @@id([bookId, authorId])
  @@unique([bookId, authorId, role])
}

/// This model will keep track of authors that will be made available to the users
model Author {
  id             BigInt              @id @default(autoincrement())
  name           String
  bio            String?
  openLibraryKey String              @unique
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  books          ArchitectsOnBooks[]
}

/// The associative table to connect books and shelves
model BooksInShelves {
  id      BigInt @id @default(autoincrement())
  book    Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  shelf   Shelf  @relation(fields: [shelfId], references: [id], onDelete: Cascade)
  bookId  BigInt
  shelfId String

  @@unique([bookId, shelfId]) // a book can be in a shelf only once
}

/// A shelf is created by users to collect a number of books together
model Shelf {
  id               String           @id @default(cuid())
  name             String
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  description      String?
  isPublic         Boolean          @default(false) // if true, this will be visible to other users
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  booksInThisShelf BooksInShelves[]
}

/// The human readable status of reading a book
enum BookProgressStatus {
  STARTED // < 10%
  INTO_IT // > 10%
  HALFWAY_THROUGH // > 50%
  ALMOST_COMPLETED // > 90%
  COMPLETED // == 100%
}

/// Model to track a user's reading progress with a particular book
model BookProgressLog {
  id         BigInt             @id @default(autoincrement())
  book       Book               @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId     BigInt
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  /// Face value, so if a book is 82% complete, this value will be `82.00`
  percentage Decimal            @default(0.00) @db.Decimal(5, 2)
  numPages   Int                @db.SmallInt
  startedOn  DateTime           @default(now())
  updatedOn  DateTime           @updatedAt
  // this a generated column in the underlying schema
  status     BookProgressStatus @default(dbgenerated())
}

/// The status of a job which is performed by a bull queue.
enum JobStatus {
  STARTED
  FAILED
  SUCCESSFUL
}

/// This model will keep track of all jobs that are performed via queues in the application.
model JobLog {
  id          Int       @id
  name        String
  status      JobStatus @default(STARTED)
  data        Json
  startedOn   DateTime  @default(now())
  // will be empty if it resulted in an error
  completedOn DateTime?
  errorLog    String?
  queueName   String
}
