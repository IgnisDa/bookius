generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "../../../dist"
  outputName          = "schema.dbml"
  projectName         = "Bookius Main Schema"
  projectDatabaseType = "PostgreSQL"
  projectNote         = "The database schema of the main bookius server"
}

/// This model will represent a user of the service.
model User {
  id        String       @id @default(cuid())
  // the cryptographic address issued by magic
  issuer    String       @unique
  createdAt DateTime     @default(now())
  profile   UserProfile?
}

/// This model will track profile information about the user
model UserProfile {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  bio       String?
  age       Int?     @db.SmallInt
  username  String   @unique @db.Citext
  email     String   @unique @db.Citext
  updatedAt DateTime @updatedAt
  // the country as represented in the country service file
  countryId Int?
}

/// This model will keep track of books that will be made available to the users
model Book {
  id             BigInt              @id @default(autoincrement())
  title          String
  description    String?
  openLibraryKey String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  architects     ArchitectsOnBooks[]
}

/// The role of a person in the complete production of a book
enum ArchitectRole {
  AUTHOR
  ILLUSTRATOR
}

/// The people who have worked on a book
model ArchitectsOnBooks {
  book     Book          @relation(fields: [bookId], references: [id])
  author   Author        @relation(fields: [authorId], references: [id])
  bookId   BigInt
  authorId BigInt
  role     ArchitectRole

  @@id([bookId, authorId])
  @@unique([bookId, authorId, role])
}

/// This model will keep track of authors that will be made available to the users
model Author {
  id             BigInt              @id @default(autoincrement())
  name           String
  bio            String?
  openLibraryKey String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  books          ArchitectsOnBooks[]
}
